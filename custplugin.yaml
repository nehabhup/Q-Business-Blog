
Description: >
    Creates a Q Business Application
    
Parameters:
    IdcInstanceArn:
      Type: String
      Description: "ARN of the Identity Center (IDC) Instance"    
      Default: "arn:aws:sso:::instance/ssoins-1111111111111111"
    
    S3BucketName:
      Type: String
      Description: "S3 Bucket to be used as a datasource"
      Default: "yourbucket"
    
    BlueprintRoleName:
        Type: String
        Default: "example-blueprint-role-name"
    
    DataSourceRoleName:
        Type: String
        Default: "example-qbusiness-datasource-role-name"

    WebExperienceRoleName:
        Type: String
        Default: "example-qbusinesswebexperience-role"
    
    SESSourceEmail:
      Type: String
      Description: "Email address that the chatbot users will be sending inquires to (customer service/ support)"
      Default: "your-verified-email@example.com"

Resources:
    QBusinessApp:
      Type: AWS::QBusiness::Application
      Properties:
        DisplayName: qbusiness-example-app
        Description: qbusiness demo app
        IdentityCenterInstanceArn: !Ref IdcInstanceArn
        RoleArn: !Sub arn:aws:iam::${AWS::AccountId}:role/aws-service-role/qbusiness.amazonaws.com/AWSServiceRoleForQBusiness

    QBusinessIndex:
      Type: AWS::QBusiness::Index
      Properties:
        ApplicationId: !Ref QBusinessApp
        CapacityConfiguration: 
          Units: 1
        DisplayName: QBusinessIndexExample
        Type: ENTERPRISE
    
    QBusinessRetriever:
      Type: AWS::QBusiness::Retriever
      Properties:
        ApplicationId: !Ref QBusinessApp
        Configuration: 
          NativeIndexConfiguration: 
            IndexId: !GetAtt QBusinessIndex.IndexId
        DisplayName: QBusinessExampleRetriever
        Type: NATIVE_INDEX

    QBusinessWebExperience:
      Type: AWS::QBusiness::WebExperience
      DependsOn: QBizWebexperienceRole
      Properties:
        ApplicationId: !Ref QBusinessApp
        RoleArn: !GetAtt QBizWebexperienceRole.Arn
        
    QBusinessCustomPlugin:
      Type: AWS::QBusiness::Plugin
      Properties:
        ApplicationId: !Ref QBusinessApp
        AuthConfiguration: 
          NoAuthConfiguration: {}
        CustomPluginConfiguration: 
          ApiSchema: 
              S3: 
                Bucket: ENTER BUCKET HERE
                Key: ENTER KEY HERE
          ApiSchemaType: OPEN_API_V3
          Description: emailplugin
        #ServerUrl: !Sub "https://${EmailSenderApi}.execute-api.${AWS::Region}.amazonaws.com"
        DisplayName: customplugin
        Type: CUSTOM

    BlueprintRole:
      Type: 'AWS::IAM::Role'
      Properties:
        RoleName: !Ref BlueprintRoleName
        AssumeRolePolicyDocument:
          Version: 2012-10-17
          Statement:
            - Sid: ''
              Effect: Allow
              Principal:
                AWS:
                  - !Sub "arn:aws:iam::${AWS::AccountId}:root"
              Action: 'sts:AssumeRole'
        ManagedPolicyArns:
          - arn:aws:iam::aws:policy/AmazonBedrockFullAccess
          - arn:aws:iam::aws:policy/SecretsManagerReadWrite
          - arn:aws:iam::aws:policy/AWSCloudFormationFullAccess
          - arn:aws:iam::aws:policy/AWSLambda_FullAccess
          - arn:aws:iam::aws:policy/CloudWatchLogsFullAccess
          - arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess
          - arn:aws:iam::aws:policy/AWSSSOMemberAccountAdministrator
          
        Policies:
          - PolicyName: BluePrintCustomPolicy
            PolicyDocument:
              Version: 2012-10-17
              Statement:
                - Effect: Allow
                  Action:
                    - access-analyzer:GetGeneratedPolicy
                    - access-analyzer:ListPolicyGenerations
                    - access-analyzer:StartPolicyGeneration
                    - access-analyzer:ValidatePolicy
                    - cloudtrail:DescribeTrails
                    - cloudtrail:ListEventDataStores
                    - cloudtrail:ListTrails
                    - cloudtrail:LookupEvents
                    - cloudtrail:CreateTrail
                    - config:DescribeConfigurationRecorderStatus
                    - config:DescribeConfigurationRecorders
                    - ec2:DescribeRegions
                    - ec2:DescribeSecurityGroups
                    - ec2:DescribeSubnets
                    - ec2:DescribeVpcs
                    - fsx:DescribeFileSystems
                    - iam:GetAccountSummary
                    - iam:GetServiceLastAccessedDetails
                    - iam:ListAccountAliases
                    - iam:ListMFADevices
                    - iam:ListPolicies
                    - iam:ListRoles
                    - iam:ListUsers
                    - organizations:DescribeOrganization
                    - organizations:ListAWSServiceAccessForOrganization
                    - organizations:ListDelegatedAdministrators
                    - resource-explorer-2:ListIndexes
                    - cloudshell:*
                    - sts:GetCallerIdentity
                  Resource: "*"
                - Effect: Allow
                  Action:
                    - iam:GenerateServiceLastAccessedDetails
                    - iam:ListPoliciesGrantingServiceAccess
                  Resource: !Sub "arn:aws:iam::${AWS::AccountId}:group/*"
                - Effect: Allow
                  Action:
                    - iam:CreatePolicy
                    - iam:GenerateServiceLastAccessedDetails
                    - iam:GetPolicy
                    - iam:GetPolicyVersion
                  Resource: !Sub "arn:aws:iam::${AWS::AccountId}:policy/*"
                - Effect: Allow
                  Action:
                    - iam:AttachRolePolicy
                    - iam:CreateRole
                    - iam:CreateServiceLinkedRole
                    - iam:GenerateServiceLastAccessedDetails
                    - iam:GetRole
                    - iam:ListAttachedRolePolicies
                    - iam:ListInstanceProfilesForRole
                    - iam:ListPoliciesGrantingServiceAccess
                    - iam:ListRolePolicies
                    - iam:PassRole
                    - iam:ListRoleTags
                  Resource: !Sub "arn:aws:iam::${AWS::AccountId}:role/${BlueprintRoleName}"
                - Effect: Allow
                  Action:
                    - iam:GenerateServiceLastAccessedDetails
                    - iam:GetAccessKeyLastUsed
                    - iam:GetLoginProfile
                    - iam:GetUser
                    - iam:ListAccessKeys
                    - iam:ListAttachedUserPolicies
                    - iam:ListGroupsForUser
                    - iam:ListPoliciesGrantingServiceAccess
                    - iam:ListSigningCertificates
                    - iam:ListUserPolicies
                    - iam:ListUserTags
                  Resource: !Sub "arn:aws:iam::${AWS::AccountId}:user/*"
                - Effect: Allow
                  Action: identitystore:DescribeUser
                  Resource: !Sub "arn:aws:identitystore::${AWS::AccountId}:identitystore/*"
                - Effect: Allow
                  Action: identitystore:DescribeUser
                  Resource: "arn:aws:identitystore:::user/*"
                - Effect: Allow
                  Action:
                    - iam:ListUsers
                    - iam:ListRoleTags
                    - iam:GetGroupPolicy
                    - iam:CreateUser
                    - iam:CreateRole
                    - iam:PassRole
                    - iam:CreateLoginProfile
                    - iam:CreatePolicyVersion
                    - iam:AttachRolePolicy
                    - iam:AttachUserPolicy
                    - iam:ListAttachedRolePolicies
                    - iam:ListAttachedGroupPolicies
                    - iam:AttachGroupPolicy
                    - iam:PutRolePolicy
                  Resource: !Sub "arn:aws:iam::${AWS::AccountId}:role/*"
                - Effect: Allow
                  Action:
                    - qbusiness:*
                    - qapps:*
                  Resource: "*"
                - Effect: Allow
                  Action: signin:*
                  Resource: "*"
                - Effect: Allow
                  Action:
                    - user-subscriptions:*
                  Resource: "*"

    QBizDataSourceRole:
        Type: 'AWS::IAM::Role'
        Properties:
            RoleName: !Ref DataSourceRoleName
            AssumeRolePolicyDocument:
                Version: 2012-10-17
                Statement:
                  - Sid: 'AllowsAmazonQToAssumeRoleForServicePrincipal'
                    Effect: Allow
                    Principal:
                      Service: 
                          - qbusiness.amazonaws.com
                    Action: 'sts:AssumeRole'
            Policies:
              - PolicyName: "QbusinessDatasourcepolicy"
                PolicyDocument:
                  Version: "2012-10-17"
                  Statement:
                    - Sid: "AllowsAmazonQToDecryptSecret"
                      Effect: "Allow"
                      Action:
                        - "kms:Decrypt"
                      Resource:
                        - !Sub "arn:aws:kms:${AWS::Region}:${AWS::AccountId}:key/*"
                      Condition:
                        StringLike:
                          "kms:ViaService": "secretsmanager.${AWS::Region}.amazonaws.com"

                    - Sid: "AllowsAmazonQToGetObjectfromS3"
                      Effect: "Allow"
                      Action:
                        - "s3:GetObject"
                        - "s3:ListBucket"
                      Resource:
                        - !Sub "arn:aws:s3:::${S3BucketName}/*"
                        - !Sub "arn:aws:s3:::${S3BucketName}/OpenAPISchema.yaml"
                      Condition:
                        StringEquals:
                          "aws:ResourceAccount": !Sub "${AWS::AccountId}"

                    - Sid: "AllowsAmazonQToListS3Buckets"
                      Effect: "Allow"
                      Action:
                        - "s3:ListBucket"
                      Resource:
                        - !Sub "arn:aws:s3:::${S3BucketName}"
                      Condition:
                        StringEquals:
                          "aws:ResourceAccount": !Sub "${AWS::AccountId}"

                    - Sid: "AllowsAmazonQToIngestDocuments"
                      Effect: "Allow"
                      Action:
                        - "qbusiness:BatchPutDocument"
                        - "qbusiness:BatchDeleteDocument"
                      Resource:
                        - !Sub "arn:aws:qbusiness:${AWS::Region}:${AWS::AccountId}:*"

                    - Sid: "AllowsAmazonQToCallPrincipalMappingAPIs"
                      Effect: "Allow"
                      Action:
                        - "qbusiness:PutGroup"
                        - "qbusiness:CreateUser"
                        - "qbusiness:DeleteGroup"
                        - "qbusiness:UpdateUser"
                        - "qbusiness:ListGroups"
                      Resource:
                        - !Sub "arn:aws:qbusiness:${AWS::Region}:${AWS::AccountId}:application/*"

                    - Sid: "AllowsAmazonQToCreateAndDeleteENI"
                      Effect: "Allow"
                      Action:
                        - "ec2:CreateNetworkInterface"
                        - "ec2:DeleteNetworkInterface"
                      Resource:
                        - !Sub "arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:subnet/*"
                        - !Sub "arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:security-group/*"
                        - !Sub "arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:network-interface/*"
                      Condition:
                        StringLike:
                          "aws:RequestTag/AMAZON_Q": !Sub "qbusiness_${AWS::AccountId}_*"
                        ForAllValues:StringEquals:
                          "aws:TagKeys":
                            - "AMAZON_Q"

                    - Sid: "AllowsAmazonQToCreateTags"
                      Effect: "Allow"
                      Action:
                        - "ec2:CreateTags"
                      Resource:
                        - !Sub "arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:network-interface/*"
                      Condition:
                        StringEquals:
                          "ec2:CreateAction": "CreateNetworkInterface"

                    - Sid: "AllowsAmazonQToCreateNetworkInterfacePermission"
                      Effect: "Allow"
                      Action:
                        - "ec2:CreateNetworkInterfacePermission"
                      Resource:
                        - !Sub "arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:network-interface/*"
                      Condition:
                        StringLike:
                          "aws:ResourceTag/AMAZON_Q": !Sub "qbusiness_${AWS::AccountId}_*"

                    - Sid: "AllowsAmazonQToConnectToVPC"
                      Effect: "Allow"
                      Action:
                        - "ec2:DescribeNetworkInterfaces"
                        - "ec2:DescribeAvailabilityZones"
                        - "ec2:DescribeNetworkInterfaceAttribute"
                        - "ec2:DescribeVpcs"
                        - "ec2:DescribeRegions"
                        - "ec2:DescribeSecurityGroups"
                        - "ec2:DescribeNetworkInterfacePermissions"
                        - "ec2:DescribeSubnets"
                      Resource: "*"
    QBizWebexperienceRole:
      Type: 'AWS::IAM::Role'
      Properties:
        RoleName: !Ref WebExperienceRoleName
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Sid: 'QBusinessTrustPolicy'
              Effect: 'Allow'
              Principal:
                Service:
                  - 'application.qbusiness.amazonaws.com'
              Action:
                - 'sts:AssumeRole'
                - 'sts:SetContext'
              Condition:
                StringEquals:
                  'aws:SourceAccount': !Sub '${AWS::AccountId}'
                ArnEquals:
                  'aws:SourceArn': !Sub 'arn:aws:qbusiness:${AWS::Region}:${AWS::AccountId}:application/*'
        Policies:
          - PolicyName: "QbusinessWebpolicy"
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Sid: QBusinessConversationPermission
                  Effect: Allow
                  Action:
                    - qbusiness:Chat
                    - qbusiness:ChatSync
                    - qbusiness:ListMessages
                    - qbusiness:ListConversations
                    - qbusiness:DeleteConversation
                    - qbusiness:PutFeedback
                    - qbusiness:GetWebExperience
                    - qbusiness:GetApplication
                    - qbusiness:ListPlugins
                    - qbusiness:GetPlugin
                    - qbusiness:ListPluginActions
                    - qbusiness:GetChatControlsConfiguration
                    - qbusiness:ListIndices
                    - qbusiness:ListDataSources
                  Resource: !Sub 'arn:aws:qbusiness:${AWS::Region}:${AWS::AccountId}:application/*'

                - Sid: QBusinessPluginDiscoveryPermissions
                  Effect: Allow
                  Action:
                    - qbusiness:ListPluginTypeMetadata
                    - qbusiness:ListPluginTypeActions
                  Resource: !Sub 'arn:aws:qbusiness:${AWS::Region}:${AWS::AccountId}:application/*'

                - Sid: QBusinessKMSDecryptPermissions
                  Effect: Allow
                  Action:
                    - kms:Decrypt
                  Resource:
                    - !Sub 'arn:aws:kms:${AWS::Region}:${AWS::AccountId}:key/*'
                  Condition:
                    StringLike:
                      'kms:ViaService': !Sub 'qbusiness.${AWS::Region}.amazonaws.com'

                - Sid: QBusinessSetContextPermissions
                  Effect: Allow
                  Action:
                    - sts:SetContext
                  Resource:
                    - 'arn:aws:sts::*:self'
                  Condition:
                    StringLike:
                      'aws:CalledViaLast': 'qbusiness.amazonaws.com'

                - Sid: QAppsResourceAgnosticPermissions
                  Effect: Allow
                  Action:
                    - qapps:CreateQApp
                    - qapps:PredictQApp
                    - qapps:PredictProblemStatementFromConversation
                    - qapps:PredictQAppFromProblemStatement
                    - qapps:ListQApps
                    - qapps:ListLibraryItems
                    - qapps:CreateSubscriptionToken
                  Resource: !Sub 'arn:aws:qbusiness:${AWS::Region}:${AWS::AccountId}:application/*'

                - Sid: QAppsAppUniversalPermissions
                  Effect: Allow
                  Action:
                    - qapps:DisassociateQAppFromUser
                  Resource: !Sub 'arn:aws:qapps:${AWS::Region}:${AWS::AccountId}:application/*'

                - Sid: QAppsAppOwnerPermissions
                  Effect: Allow
                  Action:
                    - qapps:GetQApp
                    - qapps:CopyQApp
                    - qapps:UpdateQApp
                    - qapps:DeleteQApp
                    - qapps:ImportDocument
                    - qapps:ImportDocumentToQApp
                    - qapps:CreateLibraryItem
                    - qapps:UpdateLibraryItem
                    - qapps:StartQAppSession
                  Resource: !Sub 'arn:aws:qapps:${AWS::Region}:${AWS::AccountId}:application/*'
                  Condition:
                    StringEqualsIgnoreCase:
                      'qapps:UserIsAppOwner': 'true'

                - Sid: QAppsPublishedAppPermissions
                  Effect: Allow
                  Action:
                    - qapps:GetQApp
                    - qapps:CopyQApp
                    - qapps:AssociateQAppWithUser
                    - qapps:GetLibraryItem
                    - qapps:CreateLibraryItemReview
                    - qapps:AssociateLibraryItemReview
                    - qapps:DisassociateLibraryItemReview
                    - qapps:StartQAppSession
                  Resource: !Sub 'arn:aws:qapps:${AWS::Region}:${AWS::AccountId}:application/*'
                  Condition:
                    StringEqualsIgnoreCase:
                      'qapps:AppIsPublished': 'true'

                - Sid: QAppsAppSessionModeratorPermissions
                  Effect: Allow
                  Action:
                    - qapps:ImportDocument
                    - qapps:ImportDocumentToQAppSession
                    - qapps:GetQAppSession
                    - qapps:GetQAppSessionMetadata
                    - qapps:UpdateQAppSession
                    - qapps:UpdateQAppSessionMetadata
                    - qapps:StopQAppSession
                  Resource: !Sub 'arn:aws:qapps:${AWS::Region}:${AWS::AccountId}:application/*'
                  Condition:
                    StringEqualsIgnoreCase:
                      'qapps:UserIsSessionModerator': 'true'

                - Sid: QAppsSharedAppSessionPermissions
                  Effect: Allow
                  Action:
                    - qapps:ImportDocument
                    - qapps:ImportDocumentToQAppSession
                    - qapps:GetQAppSession
                    - qapps:GetQAppSessionMetadata
                    - qapps:UpdateQAppSession
                  Resource: !Sub 'arn:aws:qapps:${AWS::Region}:${AWS::AccountId}:application/*'
                  Condition:
                    StringEqualsIgnoreCase:
                      'qapps:SessionIsShared': 'true'
    DataSourceS3:
        Type: "AWS::QBusiness::DataSource"
        Properties:
          ApplicationId: !Ref QBusinessApp
          IndexId: !GetAtt QBusinessIndex.IndexId
          DisplayName: MyS3DataSource
          RoleArn: !GetAtt 'QBizDataSourceRole.Arn'
          Configuration:
            type: S3
            syncMode: FULL_CRAWL
            connectionConfiguration:
              repositoryEndpointMetadata:
                BucketName: !Sub "${S3BucketName}"
            repositoryConfigurations:
              document:
                fieldMappings:
                  - dataSourceFieldName: content
                    indexFieldName: document_content
                    indexFieldType: STRING
    EmailSenderFunction:
      Type: AWS::Lambda::Function
      Properties:
        FunctionName: email-sender-function
        Handler: index.lambda_handler
        Role: !GetAtt EmailSenderLambdaRole.Arn
        Code:
          ZipFile: |
            import json
            import boto3
            import os
            import logging

            # Set up logging
            logger = logging.getLogger()
            logger.setLevel(logging.INFO)

            ses_client = boto3.client('ses')

            def lambda_handler(event, context):
                logger.info("Function started")
                logger.info(f"Received event: {json.dumps(event)}")
                try:
                    body = json.loads(event['body']) if event.get('body') else {}
                    
                    to_email = body.get('to')
                    subject = body.get('subject')
                    message_body = body.get('body')
                    
                    logger.info(f"Parsed email details: To: {to_email}, Subject: {subject}")
                    
                    if not to_email or not subject or not message_body:
                        logger.error("Missing required fields")
                        return {
                            'statusCode': 400,
                            'body': json.dumps({'error': 'Missing required fields: to, subject, or body'})
                        }

                    source_email = os.environ.get('SES_SOURCE_EMAIL')
                    logger.info(f"Using source email: {source_email}")

                    if not source_email:
                        logger.error("SES_SOURCE_EMAIL environment variable is not set")
                        return {
                            'statusCode': 500,
                            'body': json.dumps({'error': 'Server configuration error'})
                        }

                    response = ses_client.send_email(
                        Source=source_email,
                        Destination={
                            'ToAddresses': [to_email],
                        },
                        Message={
                            'Subject': {
                                'Data': subject,
                                'Charset': 'UTF-8'
                            },
                            'Body': {
                                'Text': {
                                    'Data': message_body,
                                    'Charset': 'UTF-8'
                                }
                            }
                        }
                    )
                    
                    logger.info(f"SES response: {response}")
                    
                    return {
                        'statusCode': 200,
                        'body': json.dumps({'message': 'Email sent successfully'})
                    }
                    
                except Exception as e:
                    logger.error(f"Error: {str(e)}", exc_info=True)
                    return {
                        'statusCode': 500,
                        'body': json.dumps({'error': f'Failed to send email due to an internal error: {str(e)}'})
                    }
        Runtime: python3.8
        Timeout: 10
        Environment:
          Variables:
            SES_SOURCE_EMAIL: !Ref SESSourceEmail

    EmailSenderLambdaRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service: lambda.amazonaws.com
              Action: sts:AssumeRole
        ManagedPolicyArns:
          - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
          - arn:aws:iam::aws:policy/AdministratorAccess

    EmailSenderApi:
      Type: AWS::ApiGatewayV2::Api
      Properties:
        Name: EmailSenderAPI
        ProtocolType: HTTP

    EmailSenderIntegration:
      Type: AWS::ApiGatewayV2::Integration
      Properties:
        ApiId: !Ref EmailSenderApi
        IntegrationType: AWS_PROXY
        IntegrationUri: !GetAtt EmailSenderFunction.Arn
        PayloadFormatVersion: '2.0'

    EmailSenderRoute:
      Type: AWS::ApiGatewayV2::Route
      Properties:
        ApiId: !Ref EmailSenderApi
        RouteKey: 'POST /send-email'
        Target: !Join 
          - /
          - - integrations
            - !Ref EmailSenderIntegration
    EmailSenderStage:
      Type: AWS::ApiGatewayV2::Stage
      Properties:
        ApiId: !Ref EmailSenderApi
        StageName: $default
        AutoDeploy: true
    LambdaApiGatewayPermission:
      Type: AWS::Lambda::Permission
      Properties:
        FunctionName: !Ref EmailSenderFunction
        Action: lambda:InvokeFunction
        Principal: apigateway.amazonaws.com
        SourceArn: !Sub 
          - arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiId}/*/*/send-email
          - ApiId: !Ref EmailSenderApi
Outputs:
    BlueprintRoleARN:
        Value: !GetAtt 'BlueprintRole.Arn'
    QBizDataSourceRoleARN:
        Value: !GetAtt 'QBizDataSourceRole.Arn'
    QBizWebexperienceRoleARN:
        Value: !GetAtt 'QBizWebexperienceRole.Arn'
    ApiEndpoint:
        Value: !Sub "https://${EmailSenderApi}.execute-api.${AWS::Region}.amazonaws.com/send-email"
